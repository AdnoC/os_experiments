[env.development.macos]
CC = "aarch64-unknown-linux-gnu-gcc"
AR = "aarch64-unknown-linux-gnu-ar"
LD = "aarch64-unknown-linux-gnu-ld"
OCOPY = "aarch64-unknown-linux-gnu-objcopy"
GDB = "aarch64-unknown-linux-gnu-gcc"
CFLAGS = "-march=armv8-a -Wall -O3 -nostdlib -nostartfiles -ffreestanding -mtune=cortex-a53"
RUSTFLAGS = "-C linker=${CC} -C target-cpu=cortex-a53 -C target-feature=+strict-align,+a53,+fp-armv8,+neon -C link-arg=-nostartfiles -C link-arg=-T./kernel8.ld"

[env.development]
condition = { platforms = ["windows", "linux"] }
CC = "aarch64-linux-gnu-gcc"
AR = "aarch64-linux-gnu-ar"
LD = "aarch64-linux-gnu-ld"
OCOPY = "aarch64-linux-gnu-objcopy"
GDB = "aarch64-linux-gnu-gdb"
CFLAGS = "-march=armv8-a -Wall -O3 -nostdlib -nostartfiles -ffreestanding -mtune=cortex-a53"
RUSTFLAGS = "-C linker=${CC} -C target-cpu=cortex-a53 -C target-feature=+strict-align,+a53,+fp-armv8,+neon -C link-arg=-nostartfiles -C link-arg=-T./kernel8.ld"
# RUSTFLAGS = "-C linker=${CC} -C target-cpu=cortex-a53 -C target-feature=+strict-align,+a53,+fp-armv8,+neon -C link-arg=-nostartfiles -C link-arg=-T./kernel8.ld"

[env.pipeline]
CC = "aarch64-linux-gnu-gcc"
AR = "aarch64-linux-gnu-ar"
LD = "aarch64-linux-gnu-ld"
OCOPY = "aarch64-linux-gnu-objcopy"
CFLAGS = "-march=armv8-a -Wall -O3 -nostdlib -nostartfiles -ffreestanding -mtune=cortex-a53"
RUSTFLAGS = "-C linker=${CC} -C target-cpu=cortex-a53 -C target-feature=+strict-align,+a53,+fp-armv8,+neon -C link-arg=-nostartfiles -C link-arg=-T./kernel8.ld"


[tasks.build]
command = "cargo"
args = ["build", "--release", ]

[tasks.img]
dependencies = ["build"]
command = "${OCOPY}"
args = ["-O", "binary", "./target/aarch64-unknown-linux-gnu/release/os_experiments", "target/kernel.img"]
# args = ["-O", "binary", "./target/aarch64-ruspiro/release/os_experiments", "target/kernel.img"]

[tasks.qemu-run]
dependencies = ["img"]
command = "qemu-system-aarch64.exe"
args = ["-M", "raspi3b", "-nographic", "-kernel", "target/kernel.img", "-serial", "null", "-serial", "mon:stdio"]

[tasks.qemu-gdb]
dependencies = ["img"]
command = "qemu-system-aarch64.exe"
# -S freezes program at startup
args = ["-M", "raspi3b", "-s", "-S", "-nographic", "-serial", "null", "-serial", "mon:stdio", "-kernel", "target/kernel.img"]

[tasks.qemu-msg]
command = "echo"
args = [ "(Press Ctrl-A X to exit QEMU.)" ]

[tasks.qemu]
# command = "echo"
# args = [ "${OCOPY}" ]
run_task = [
  { name = ["qemu-msg", "qemu-run"]}
]
